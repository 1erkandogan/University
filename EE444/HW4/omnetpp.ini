[General]
total-stack = 7MiB

[Config Part1c_ALL]
network = hw1_network
sim-time-limit = 10s
record-eventlog = true
hw1_network.nodeCount = ${N = 2, 4, 8, 16, 32, 64, 128}
hw1_network.hosts[*].cli.sendInterval = exponential(0.01s) # Send interval for all hosts
**.hosts[0].cli.destAddress = ""
**.cli.destAddress =  "hosts[0]"
hw1_network.hosts[*].cli.reqLength = 128B # Request length for all hosts
hw1_network.hosts[*].cli.respLength = 128B # Response length for all hosts

[Config Part1d_ALL]
network = hw1_network
sim-time-limit = 10s
record-eventlog = true
hw1_network.nodeCount = 16
hw1_network.hosts[*].cli.sendInterval = exponential(0.01s) # Send interval for all hosts
**.hosts[0].cli.destAddress = ""
**.cli.destAddress =  "hosts[0]"
hw1_network.hosts[*].cli.reqLength =  ${N = 64B, 128B, 256B, 512B, 1024B} # Request length for all hosts
hw1_network.hosts[*].cli.respLength = ${N} # Response length for all hosts

[Config Part1e_ALL]
network = hw1_network
sim-time-limit = 10s
record-eventlog = true
hw1_network.nodeCount = 16
hw1_network.hosts[*].cli.sendInterval = exponential(0.005s) # Send interval for all hosts
**.hosts[0].cli.destAddress = ""
**.cli.destAddress =  "hosts[0]"
hw1_network.hosts[*].cli.reqLength =  128B # Request length for all hosts
hw1_network.hosts[*].cli.respLength = 128B # Response length for all hosts

[Config Part2c_ALL]
network = hw1_network2
sim-time-limit = 10s
record-eventlog = true
hw1_network2.nodeCount = ${N = 2, 4, 8, 16, 32, 64, 128}
hw1_network2.hosts[*].cli.sendInterval = exponential(0.01s) # Send interval for all hosts
**.hosts[0].cli.destAddress = ""
**.cli.destAddress =  "hosts[0]"
hw1_network2.hosts[*].cli.reqLength = 128B # Request length for all hosts
hw1_network2.hosts[*].cli.respLength = 128B # Response length for all hosts

[Config Part2d_ALL]
network = hw1_network2
sim-time-limit = 10s
record-eventlog = true
hw1_network2.nodeCount = 16
hw1_network2.hosts[*].cli.sendInterval = exponential(0.01s) # Send interval for all hosts
**.hosts[0].cli.destAddress = ""
**.cli.destAddress =  "hosts[0]"
hw1_network2.hosts[*].cli.reqLength =  ${N = 64B, 128B, 256B, 512B, 1024B} # Request length for all hosts
hw1_network2.hosts[*].cli.respLength = ${N} # Response length for all hosts

[Config Part2e_ALL]
network = hw1_network2
sim-time-limit = 10s
record-eventlog = true
hw1_network2.nodeCount = 16
hw1_network2.hosts[*].cli.sendInterval = exponential(0.005s) # Send interval for all hosts
**.hosts[0].cli.destAddress = ""
**.cli.destAddress =  "hosts[0]"
hw1_network2.hosts[*].cli.reqLength =  128B # Request length for all hosts
hw1_network2.hosts[*].cli.respLength = 128B # Response length for all hosts

[Config TCP1]
network = hw1_network_tcp
sim-time-limit = 100s
record-eventlog = true
hw1_network_tcp.server.numPcapRecorders = 1
hw1_network_tcp.server.pcapRecorder[0].pcapFile = "results/server.pcap"
hw1_network_tcp.client.numPcapRecorders = 1
hw1_network_tcp.client.pcapRecorder[0].pcapFile = "results/client1.pcap"
**.crcMode = "computed"
## tcp apps
hw1_network_tcp.client.numApps = 1
hw1_network_tcp.client.app[0].typename = "TcpSessionApp"
hw1_network_tcp.client.app[0].active = true
hw1_network_tcp.client.app[0].localPort = 1000
hw1_network_tcp.client.app[0].connectAddress = "server"
hw1_network_tcp.client.app[0].connectPort = 1000
hw1_network_tcp.client.app[0].tOpen = 0.2s
hw1_network_tcp.client.app[0].tSend = 0.4s
hw1_network_tcp.client.app[0].sendBytes = 1000000B
hw1_network_tcp.client.app[0].tClose = 25s

hw1_network_tcp.server.numApps = 1
hw1_network_tcp.server.app[0].typename = "TcpSinkApp"
hw1_network_tcp.server.app[0].localPort = 1000

# NIC configuration
hw1_network_tcp.router.ppp[*].queue.typename = "DropTailQueue" # in routers
hw1_network_tcp.router.ppp[*].queue.packetCapacity = 10  # in routers

[Config TCP2]
network = hw1_network_tcp
sim-time-limit = 100s
record-eventlog = true
hw1_network_tcp.server.numPcapRecorders = 1
hw1_network_tcp.server.pcapRecorder[0].pcapFile = "results/server.pcap"
hw1_network_tcp.client.numPcapRecorders = 1
hw1_network_tcp.client.pcapRecorder[0].pcapFile = "results/client1.pcap"
**.crcMode = "computed"
## tcp apps
hw1_network_tcp.client.numApps = 1
hw1_network_tcp.client.app[0].typename = "TcpSessionApp"
hw1_network_tcp.client.app[0].active = true
hw1_network_tcp.client.app[0].localPort = 1000
hw1_network_tcp.client.app[0].connectAddress = "server"
hw1_network_tcp.client.app[0].connectPort = 1000
hw1_network_tcp.client.app[0].tOpen = 0.2s
hw1_network_tcp.client.app[0].tSend = 0.4s
hw1_network_tcp.client.app[0].sendBytes = 1000000B
hw1_network_tcp.client.app[0].tClose = 25s

hw1_network_tcp.server.numApps = 1
hw1_network_tcp.server.app[0].typename = "TcpSinkApp"
hw1_network_tcp.server.app[0].localPort = 1000

# NIC configuration
hw1_network_tcp.router.ppp[*].queue.typename = "DropTailQueue" # in routers
hw1_network_tcp.router.ppp[*].queue.packetCapacity = 10  # in routers

[Config TCP3]
network = hw1_network_tcp2
sim-time-limit = 100s
record-eventlog = true
hw1_network_tcp2.server.numPcapRecorders = 1
hw1_network_tcp2.server.pcapRecorder[0].pcapFile = "results/server.pcap"
hw1_network_tcp2.client*.numPcapRecorders = 1
hw1_network_tcp2.client*.pcapRecorder[0].pcapFile = "results/client1.pcap"
**.crcMode = "computed"
## tcp apps
hw1_network_tcp2.client*.numApps = 1
hw1_network_tcp2.client*.app[*].typename = "TcpSessionApp"
hw1_network_tcp2.client*.app[0].active = true
hw1_network_tcp2.client*.app[0].localPort = 1000
hw1_network_tcp2.client*.app[0].connectAddress = "server"
hw1_network_tcp2.client*.app[0].connectPort = 1000
hw1_network_tcp2.client*.app[0].tOpen = 0.2s
hw1_network_tcp2.client*.app[0].tSend = 0.4s
hw1_network_tcp2.client*.app[0].sendBytes = 1000000B
hw1_network_tcp2.client*.app[0].tClose = 25s

hw1_network_tcp2.server.numApps = 1
hw1_network_tcp2.server.app[0].typename = "TcpSinkApp"
hw1_network_tcp2.server.app[0].localPort = 1000

# NIC configuration
hw1_network_tcp2.router.ppp[*].queue.typename = "DropTailQueue" # in routers
hw1_network_tcp2.router.ppp[*].queue.packetCapacity = 100  # in routers

[Config TCP4]
network = hw1_network_tcp2
sim-time-limit = 100s
record-eventlog = true
hw1_network_tcp2.server.numPcapRecorders = 1
hw1_network_tcp2.server.pcapRecorder[0].pcapFile = "results/server.pcap"
hw1_network_tcp2.client*.numPcapRecorders = 1
hw1_network_tcp2.client*.pcapRecorder[0].pcapFile = "results/client1.pcap"
**.crcMode = "computed"
## tcp apps
hw1_network_tcp2.client*.numApps = 1
hw1_network_tcp2.client*.app[*].typename = "TcpSessionApp"
hw1_network_tcp2.client*.app[0].active = true
hw1_network_tcp2.client*.app[0].localPort = 1000
hw1_network_tcp2.client*.app[0].connectAddress = "server"
hw1_network_tcp2.client*.app[0].connectPort = 1000
#hw1_network_tcp2.client*.app[0].tOpen = 0.2s
#hw1_network_tcp2.client*.app[0].tSend = 0.4s
hw1_network_tcp2.client*.app[0].sendBytes = 1000000B
#hw1_network_tcp2.client*.app[0].tClose = 25s

hw1_network_tcp2.server.numApps = 1
hw1_network_tcp2.server.app[0].typename = "TcpSinkApp"
hw1_network_tcp2.server.app[0].localPort = 1000

# NIC configuration
hw1_network_tcp2.router.ppp[*].queue.typename = "DropTailQueue" # in routers
hw1_network_tcp2.router.ppp[*].queue.packetCapacity = 100  # in routers

[Config TCP5]
network = hw1_network_tcp2
sim-time-limit = 100s
record-eventlog = true
hw1_network_tcp2.server.numPcapRecorders = 1
hw1_network_tcp2.server.pcapRecorder[0].pcapFile = "results/server.pcap"
hw1_network_tcp2.client*.numPcapRecorders = 1
hw1_network_tcp2.client*.pcapRecorder[0].pcapFile = "results/client1.pcap"
**.crcMode = "computed"
## tcp apps
hw1_network_tcp2.client1.numApps = 1
hw1_network_tcp2.client2.numApps = 2
hw1_network_tcp2.client*.app[*].typename = "TcpSessionApp"
hw1_network_tcp2.client*.app[*].active = true
hw1_network_tcp2.client1.app[*].localPort = 1000
hw1_network_tcp2.client2.app[0].localPort = 1000
hw1_network_tcp2.client2.app[1].localPort = 1001
hw1_network_tcp2.client*.app[*].connectAddress = "server"
hw1_network_tcp2.client1.app[0].connectPort = 1000
hw1_network_tcp2.client2.app[1].connectPort = 1001
#hw1_network_tcp2.client*.app[*].tOpen = 0.2s
#hw1_network_tcp2.client*.app[*].tSend = 0.4s
hw1_network_tcp2.client*.app[*].sendBytes = 1000000B
#hw1_network_tcp2.client*.app[*].tClose = 25s

hw1_network_tcp2.server.numApps = 2
hw1_network_tcp2.server.app[*].typename = "TcpSinkApp"
hw1_network_tcp2.server.app[0].localPort = 1000
hw1_network_tcp2.server.app[1].localPort = 1001

# NIC configuration
hw1_network_tcp2.router.ppp[*].queue.typename = "DropTailQueue" # in routers
hw1_network_tcp2.router.ppp[*].queue.packetCapacity = 100  # in routers